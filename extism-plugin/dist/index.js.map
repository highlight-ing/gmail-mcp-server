{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/handlers/email.ts", "../src/main.ts"],
  "sourcesContent": ["/**\n * Main entry point for the Gmail MCP Extism Plugin.\n * This file exports WebAssembly compatible functions that serve as entry points\n * for interacting with the Gmail API through the Extism runtime.\n */\nimport * as main from \"./main\";\n\nimport { CallToolRequest, CallToolResult, ListToolsResult } from \"./pdk\";\n\nexport function call(): number {\n  const untypedInput = JSON.parse(Host.inputString());\n  const input = CallToolRequest.fromJson(untypedInput);\n\n  const output = main.callImpl(input);\n\n  const untypedOutput = CallToolResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n\nexport function describe(): number {\n  const output = main.describeImpl();\n\n  const untypedOutput = ListToolsResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n", "/**\n * Types for the Plugin Development Kit (PDK)\n * These types define the interface between the Extism runtime and the plugin.\n */\n\n/**\n * Request to call a specific tool\n */\nexport class CallToolRequest {\n  toolId: string;\n  arguments: Record<string, any>;\n  \n  constructor(toolId: string, arguments_: Record<string, any>) {\n    this.toolId = toolId;\n    this.arguments = arguments_;\n  }\n  \n  static fromJson(json: any): CallToolRequest {\n    return new CallToolRequest(json.toolId, json.arguments || {});\n  }\n  \n  static toJson(request: CallToolRequest): any {\n    return {\n      toolId: request.toolId,\n      arguments: request.arguments\n    };\n  }\n}\n\n/**\n * Result of calling a tool\n */\nexport class CallToolResult {\n  state: string;\n  result: any;\n  error?: string;\n  \n  constructor(state: string, result: any, error?: string) {\n    this.state = state;\n    this.result = result;\n    this.error = error;\n  }\n  \n  static fromJson(json: any): CallToolResult {\n    return new CallToolResult(json.state, json.result, json.error);\n  }\n  \n  static toJson(result: CallToolResult): any {\n    const json: any = {\n      state: result.state,\n      result: result.result\n    };\n    if (result.error) {\n      json.error = result.error;\n    }\n    return json;\n  }\n}\n\n/**\n * Tool description\n */\nexport class Tool {\n  id: string;\n  label: string;\n  description: string;\n  parameters: Record<string, any>;\n  \n  constructor(id: string, label: string, description: string, parameters: Record<string, any>) {\n    this.id = id;\n    this.label = label;\n    this.description = description;\n    this.parameters = parameters;\n  }\n  \n  static fromJson(json: any): Tool {\n    return new Tool(\n      json.id,\n      json.label,\n      json.description,\n      json.parameters || {}\n    );\n  }\n  \n  static toJson(tool: Tool): any {\n    return {\n      id: tool.id,\n      label: tool.label,\n      description: tool.description,\n      parameters: tool.parameters\n    };\n  }\n}\n\n/**\n * Result of listing available tools\n */\nexport class ListToolsResult {\n  tools: any[];\n  \n  constructor(tools: any[]) {\n    this.tools = tools;\n  }\n  \n  static fromJson(json: any): ListToolsResult {\n    return new ListToolsResult(json.tools || []);\n  }\n  \n  static toJson(result: ListToolsResult): any {\n    return {\n      tools: result.tools\n    };\n  }\n} ", "/**\n * Email handling functions for interacting with the Gmail API.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n  try {\n    const input = Host.inputString();\n    const args = JSON.parse(input);\n    return args;\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n    return null;\n  }\n}\n  \n/**\n * Handles listing emails from the user's Gmail account.\n * Fetches a list of messages and their details based on the provided query parameters.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleListEmails(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const accessToken: string = args.accessToken;\n  const maxResults: number = args.maxResults || 10;\n  const query: string = args.query || \"\";\n\n  // Construct URL for listing messages\n  const listUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n  const response = Http.request({\n    url: listUrl,\n    method: \"GET\",\n    headers: { \"Authorization\": `Bearer ${accessToken}` }\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to fetch emails: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n    return 1;\n  }\n\n  const messages = data.messages || [];\n  const emailDetails: any[] = [];\n\n  // Fetch detailed information for each message\n  for (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n    const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n    const detailResponse = Http.request({\n      url: detailUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n    if (detailResponse.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n      return 1;\n    }\n    let detail;\n    try {\n      detail = JSON.parse(detailResponse.body);\n    } catch (err) {\n      continue;\n    }\n    // Extract relevant header information\n    const headers = detail.payload?.headers;\n    let subject = \"\";\n    let from = \"\";\n    let date = \"\";\n    if (headers && Array.isArray(headers)) {\n      for (let j = 0; j < headers.length; j++) {\n        const header = headers[j];\n        if (header.name === \"Subject\") subject = header.value;\n        if (header.name === \"From\") from = header.value;\n        if (header.name === \"Date\") date = header.value;\n      }\n    }\n    emailDetails.push({ id: msg.id, subject, from, date });\n  }\n\n  Host.outputString(JSON.stringify(emailDetails, null, 2));\n  return 0;\n}\n\n/**\n * Handles searching emails based on a specific query.\n * Nearly identical to handleListEmails, but requires a query parameter.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleSearchEmails(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const accessToken: string = args.accessToken;\n  const maxResults: number = args.maxResults || 10;\n  const query: string = args.query;\n  if (!query) {\n    Host.outputString(JSON.stringify({ error: \"query parameter is required\" }));\n    return 1;\n  }\n\n  // Construct URL for searching messages with the provided query\n  const searchUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n  const response = Http.request({\n    url: searchUrl,\n    method: \"GET\",\n    headers: { \"Authorization\": `Bearer ${accessToken}` }\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to search emails: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n    return 1;\n  }\n\n  const messages = data.messages || [];\n  const emailDetails: any[] = [];\n\n  // Fetch detailed information for each message\n  for (let i = 0; i < messages.length; i++) {\n    const msg = messages[i];\n    const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n    const detailResponse = Http.request({\n      url: detailUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n    if (detailResponse.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n      return 1;\n    }\n    let detail;\n    try {\n      detail = JSON.parse(detailResponse.body);\n    } catch (err) {\n      continue;\n    }\n    // Extract relevant header information\n    const headers = detail.payload?.headers;\n    let subject = \"\";\n    let from = \"\";\n    let date = \"\";\n    if (headers && Array.isArray(headers)) {\n      for (let j = 0; j < headers.length; j++) {\n        const header = headers[j];\n        if (header.name === \"Subject\") subject = header.value;\n        if (header.name === \"From\") from = header.value;\n        if (header.name === \"Date\") date = header.value;\n      }\n    }\n    emailDetails.push({ id: msg.id, subject, from, date });\n  }\n\n  Host.outputString(JSON.stringify(emailDetails, null, 2));\n  return 0;\n}\n\n/**\n * Handles sending a new email through the Gmail API.\n * Constructs a properly formatted email (including MIME parts) and sends it.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleSendEmail(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { accessToken, to, subject, body, cc, bcc } = args;\n  \n  // Construct email with proper MIME format\n  const messageParts = [\n    \"Content-Type: text/html; charset=utf-8\",\n    \"MIME-Version: 1.0\",\n    `To: ${to}`,\n    cc ? `Cc: ${cc}` : \"\",\n    bcc ? `Bcc: ${bcc}` : \"\",\n    `Subject: ${subject}`,\n    \"\",\n    body\n  ].filter(Boolean);\n  const message = messageParts.join(\"\\r\\n\");\n\n  // Base64 URL encode the message\n  let encodedMessage = Buffer.from(message).toString(\"base64\");\n  encodedMessage = encodedMessage.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n\n  // Send the email using the Gmail API\n  const sendUrl = \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\";\n  const response = Http.request({\n    url: sendUrl,\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ raw: encodedMessage })\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to send email: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ message: \"Email sent successfully\", id: data.id }));\n  return 0;\n}\n\n/**\n * Handles modifying labels on an existing email.\n * Can add and/or remove labels from a specific email message.\n * \n * @returns 0 on success, 1 on error\n */\nexport function handleModifyEmail(): number {\n  const args = getArgs();\n  if (!args) return 1;\n\n  const { accessToken, id, addLabels = [], removeLabels = [] } = args;\n  \n  // Call the Gmail API to modify the email's labels\n  const modifyUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${id}/modify`;\n  const response = Http.request({\n    url: modifyUrl,\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      addLabelIds: addLabels,\n      removeLabelIds: removeLabels\n    })\n  });\n\n  if (response.status !== 200) {\n    Host.outputString(JSON.stringify({ error: `Failed to modify email: ${response.body}` }));\n    return 1;\n  }\n\n  let data;\n  try {\n    data = JSON.parse(response.body);\n  } catch (err) {\n    Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n    return 1;\n  }\n\n  Host.outputString(JSON.stringify({ message: \"Email modified successfully\", id: data.id }));\n  return 0;\n}\n  ", "/**\n * Main implementation for the Gmail Extism Plugin.\n * This file contains the core implementation that processes the requests from the host.\n */\nimport {\n  CallToolRequest,\n  CallToolResult,\n  ListToolsResult,\n  Tool\n} from \"./pdk\";\n\nimport {\n  handleListEmails,\n  handleSearchEmails,\n  handleSendEmail,\n  handleModifyEmail\n} from \"./handlers/email\";\n\n/**\n * Implementation of the call function that routes requests to the appropriate handler.\n * @param request The request to process\n * @returns The result of processing the request\n */\nexport function callImpl(request: CallToolRequest): CallToolResult {\n  try {\n    // Save original methods for restoration later\n    const originalInputString = Host.inputString;\n    let outputContent: string = \"\";\n\n    // Override Host.inputString and Host.outputString for the handlers\n    Host.inputString = () => JSON.stringify(request.arguments);\n    const originalOutputString = Host.outputString;\n    Host.outputString = (content: string) => {\n      outputContent = content;\n      return true;\n    };\n\n    let result: number = 1;\n\n    // Route the request to the appropriate handler based on the toolId\n    switch (request.toolId) {\n      case \"list_emails\":\n        result = handleListEmails();\n        break;\n        \n      case \"search_emails\":\n        result = handleSearchEmails();\n        break;\n        \n      case \"send_email\":\n        result = handleSendEmail();\n        break;\n        \n      case \"modify_email\":\n        result = handleModifyEmail();\n        break;\n        \n      default:\n        // Restore original methods\n        Host.inputString = originalInputString;\n        Host.outputString = originalOutputString;\n        return new CallToolResult(\n          \"error\",\n          null,\n          `Unknown tool: ${request.toolId}`\n        );\n    }\n\n    // Restore original methods\n    Host.inputString = originalInputString;\n    Host.outputString = originalOutputString;\n\n    // Process result\n    if (result === 0) {\n      try {\n        const parsedOutput = JSON.parse(outputContent);\n        return new CallToolResult(\"success\", parsedOutput, undefined);\n      } catch (err) {\n        return new CallToolResult(\n          \"success\",\n          { message: outputContent },\n          undefined\n        );\n      }\n    } else {\n      try {\n        const parsedError = JSON.parse(outputContent);\n        return new CallToolResult(\n          \"error\",\n          null,\n          parsedError.error || \"Unknown error\"\n        );\n      } catch (err) {\n        return new CallToolResult(\"error\", null, outputContent || \"Unknown error\");\n      }\n    }\n  } catch (err) {\n    return new CallToolResult(\n      \"error\",\n      null,\n      `Error: ${err instanceof Error ? err.message : String(err)}`\n    );\n  }\n}\n\n/**\n * Implementation of the describe function that returns the list of available tools.\n * @returns A list of available tools in the OpenAI API tool format\n */\nexport function describeImpl(): ListToolsResult {\n  const tools = [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"list_emails\",\n        \"description\": \"Lists emails from the user's Gmail account\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessToken\": {\n              \"type\": \"string\", \n              \"description\": \"OAuth2 access token\"\n            },\n            \"maxResults\": {\n              \"type\": \"integer\",\n              \"description\": \"Maximum number of emails to return\"\n            },\n            \"query\": {\n              \"type\": \"string\",\n              \"description\": \"Query to filter emails\"\n            }\n          },\n          \"required\": [\"accessToken\"]\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"search_emails\",\n        \"description\": \"Searches emails in the user's Gmail account based on a query\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessToken\": {\n              \"type\": \"string\",\n              \"description\": \"OAuth2 access token\"\n            },\n            \"maxResults\": {\n              \"type\": \"integer\",\n              \"description\": \"Maximum number of emails to return\"\n            },\n            \"query\": {\n              \"type\": \"string\",\n              \"description\": \"Query to filter emails\"\n            }\n          },\n          \"required\": [\"accessToken\", \"query\"]\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"send_email\",\n        \"description\": \"Sends an email from the user's Gmail account\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessToken\": {\n              \"type\": \"string\",\n              \"description\": \"OAuth2 access token\"\n            },\n            \"to\": {\n              \"type\": \"string\",\n              \"description\": \"Email recipient\"\n            },\n            \"subject\": {\n              \"type\": \"string\",\n              \"description\": \"Email subject\"\n            },\n            \"body\": {\n              \"type\": \"string\",\n              \"description\": \"Email body (HTML)\"\n            },\n            \"cc\": {\n              \"type\": \"string\",\n              \"description\": \"Carbon copy recipients\"\n            },\n            \"bcc\": {\n              \"type\": \"string\",\n              \"description\": \"Blind carbon copy recipients\"\n            }\n          },\n          \"required\": [\"accessToken\", \"to\", \"subject\", \"body\"]\n        }\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"modify_email\",\n        \"description\": \"Modifies an email by adding or removing labels\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessToken\": {\n              \"type\": \"string\",\n              \"description\": \"OAuth2 access token\"\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"description\": \"Email ID\"\n            },\n            \"addLabels\": {\n              \"type\": \"array\",\n              \"description\": \"Labels to add\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"removeLabels\": {\n              \"type\": \"array\",\n              \"description\": \"Labels to remove\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          \"required\": [\"accessToken\", \"id\"]\n        }\n      }\n    }\n  ];\n  \n  return new ListToolsResult(tools);\n} "],
  "mappings": "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",
  "names": []
}
