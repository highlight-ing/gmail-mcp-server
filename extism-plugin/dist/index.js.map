{
  "version": 3,
  "sources": ["../src/index.ts", "../src/pdk.ts", "../src/handlers/email.ts", "../src/main.ts"],
  "sourcesContent": ["/**\n * Main entry point for the Gmail MCP Extism Plugin.\n * This file exports WebAssembly compatible functions that serve as entry points\n * for interacting with the Gmail API through the Extism runtime.\n */\nimport * as main from \"./main\";\n\nimport { CallToolRequest, CallToolResult, ListToolsResult } from \"./pdk\";\n\nexport function call(): number {\n  const untypedInput = JSON.parse(Host.inputString());\n  const input = CallToolRequest.fromJson(untypedInput);\n\n  const output = main.callImpl(input);\n\n  const untypedOutput = CallToolResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n\nexport function describe(): number {\n  const output = main.describeImpl();\n\n  const untypedOutput = ListToolsResult.toJson(output);\n  Host.outputString(JSON.stringify(untypedOutput));\n\n  return 0;\n}\n", "/**\n * Types for the Plugin Development Kit (PDK)\n * These types define the interface between the Extism runtime and the plugin.\n */\n\n/**\n * Request to call a specific tool\n */\nexport class CallToolRequest {\n  toolId: string;\n  arguments: Record<string, any>;\n  \n  constructor(toolId: string, arguments_: Record<string, any>) {\n    this.toolId = toolId;\n    this.arguments = arguments_;\n  }\n  \n  static fromJson(json: any): CallToolRequest {\n    return new CallToolRequest(json.toolId, json.arguments || {});\n  }\n  \n  static toJson(request: CallToolRequest): any {\n    return {\n      toolId: request.toolId,\n      arguments: request.arguments\n    };\n  }\n}\n\n/**\n * Result of calling a tool\n */\nexport class CallToolResult {\n  state: string;\n  result: any;\n  error?: string;\n  \n  constructor(state: string, result: any, error?: string) {\n    this.state = state;\n    this.result = result;\n    this.error = error;\n  }\n  \n  static fromJson(json: any): CallToolResult {\n    return new CallToolResult(json.state, json.result, json.error);\n  }\n  \n  static toJson(result: CallToolResult): any {\n    const json: any = {\n      state: result.state,\n      result: result.result\n    };\n    if (result.error) {\n      json.error = result.error;\n    }\n    return json;\n  }\n}\n\n/**\n * Tool description\n */\nexport class Tool {\n  id: string;\n  label: string;\n  description: string;\n  parameters: Record<string, any>;\n  \n  constructor(id: string, label: string, description: string, parameters: Record<string, any>) {\n    this.id = id;\n    this.label = label;\n    this.description = description;\n    this.parameters = parameters;\n  }\n  \n  static fromJson(json: any): Tool {\n    return new Tool(\n      json.id,\n      json.label,\n      json.description,\n      json.parameters || {}\n    );\n  }\n  \n  static toJson(tool: Tool): any {\n    return {\n      id: tool.id,\n      label: tool.label,\n      description: tool.description,\n      parameters: tool.parameters\n    };\n  }\n}\n\n/**\n * Result of listing available tools\n */\nexport class ListToolsResult {\n  tools: Tool[];\n  \n  constructor(tools: Tool[]) {\n    this.tools = tools;\n  }\n  \n  static fromJson(json: any): ListToolsResult {\n    const tools = (json.tools || []).map((t: any) => Tool.fromJson(t));\n    return new ListToolsResult(tools);\n  }\n  \n  static toJson(result: ListToolsResult): any {\n    return {\n      tools: result.tools.map(t => Tool.toJson(t))\n    };\n  }\n} ", "/**\n * Email handling functions for interacting with the Gmail API.\n * Uses the Host and Http globals that are injected by the Extism runtime.\n */\n\n// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\n/**\n * Parses JSON input from the Host and returns the arguments as an object.\n * On failure, outputs an error message and returns null.\n * @returns Parsed arguments object or null if parsing fails\n */\nfunction getArgs(): any | null {\n    const input = Host.inputString();\n    try {\n      return JSON.parse(input);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n      return null;\n    }\n  }\n  \n  /**\n   * Handles listing emails from the user's Gmail account.\n   * Fetches a list of messages and their details based on the provided query parameters.\n   * \n   * @returns 0 on success, 1 on error\n   */\n  export function handleListEmails(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const accessToken: string = args.accessToken;\n    const maxResults: number = args.maxResults || 10;\n    const query: string = args.query || \"\";\n  \n    // Construct URL for listing messages\n    const listUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n    const response = Http.request({\n      url: listUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to fetch emails: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    const messages = data.messages || [];\n    const emailDetails: any[] = [];\n  \n    // Fetch detailed information for each message\n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n      const detailResponse = Http.request({\n        url: detailUrl,\n        method: \"GET\",\n        headers: { \"Authorization\": `Bearer ${accessToken}` }\n      });\n      if (detailResponse.status !== 200) {\n        Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n        return 1;\n      }\n      let detail;\n      try {\n        detail = JSON.parse(detailResponse.body);\n      } catch (err) {\n        continue;\n      }\n      // Extract relevant header information\n      const headers = detail.payload?.headers;\n      let subject = \"\";\n      let from = \"\";\n      let date = \"\";\n      if (headers && Array.isArray(headers)) {\n        for (let j = 0; j < headers.length; j++) {\n          const header = headers[j];\n          if (header.name === \"Subject\") subject = header.value;\n          if (header.name === \"From\") from = header.value;\n          if (header.name === \"Date\") date = header.value;\n        }\n      }\n      emailDetails.push({ id: msg.id, subject, from, date });\n    }\n  \n    Host.outputString(JSON.stringify(emailDetails, null, 2));\n    return 0;\n  }\n  \n  /**\n   * Handles searching emails based on a specific query.\n   * Nearly identical to handleListEmails, but requires a query parameter.\n   * \n   * @returns 0 on success, 1 on error\n   */\n  export function handleSearchEmails(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const accessToken: string = args.accessToken;\n    const maxResults: number = args.maxResults || 10;\n    const query: string = args.query;\n    if (!query) {\n      Host.outputString(JSON.stringify({ error: \"query parameter is required\" }));\n      return 1;\n    }\n  \n    // Construct URL for searching messages with the provided query\n    const searchUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n    const response = Http.request({\n      url: searchUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to search emails: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    const messages = data.messages || [];\n    const emailDetails: any[] = [];\n  \n    // Fetch detailed information for each message\n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n      const detailResponse = Http.request({\n        url: detailUrl,\n        method: \"GET\",\n        headers: { \"Authorization\": `Bearer ${accessToken}` }\n      });\n      if (detailResponse.status !== 200) {\n        Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n        return 1;\n      }\n      let detail;\n      try {\n        detail = JSON.parse(detailResponse.body);\n      } catch (err) {\n        continue;\n      }\n      // Extract relevant header information\n      const headers = detail.payload?.headers;\n      let subject = \"\";\n      let from = \"\";\n      let date = \"\";\n      if (headers && Array.isArray(headers)) {\n        for (let j = 0; j < headers.length; j++) {\n          const header = headers[j];\n          if (header.name === \"Subject\") subject = header.value;\n          if (header.name === \"From\") from = header.value;\n          if (header.name === \"Date\") date = header.value;\n        }\n      }\n      emailDetails.push({ id: msg.id, subject, from, date });\n    }\n  \n    Host.outputString(JSON.stringify(emailDetails, null, 2));\n    return 0;\n  }\n  \n  /**\n   * Handles sending a new email through the Gmail API.\n   * Constructs a properly formatted email (including MIME parts) and sends it.\n   * \n   * @returns 0 on success, 1 on error\n   */\n  export function handleSendEmail(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const { accessToken, to, subject, body, cc, bcc } = args;\n    \n    // Construct email with proper MIME format\n    const messageParts = [\n      \"Content-Type: text/html; charset=utf-8\",\n      \"MIME-Version: 1.0\",\n      `To: ${to}`,\n      cc ? `Cc: ${cc}` : \"\",\n      bcc ? `Bcc: ${bcc}` : \"\",\n      `Subject: ${subject}`,\n      \"\",\n      body\n    ].filter(Boolean);\n    const message = messageParts.join(\"\\r\\n\");\n  \n    // Base64 URL encode the message\n    let encodedMessage = Buffer.from(message).toString(\"base64\");\n    encodedMessage = encodedMessage.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  \n    // Send the email using the Gmail API\n    const sendUrl = \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\";\n    const response = Http.request({\n      url: sendUrl,\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ raw: encodedMessage })\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to send email: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    Host.outputString(JSON.stringify({ message: \"Email sent successfully\", id: data.id }));\n    return 0;\n  }\n  \n  /**\n   * Handles modifying labels on an existing email.\n   * Can add and/or remove labels from a specific email message.\n   * \n   * @returns 0 on success, 1 on error\n   */\n  export function handleModifyEmail(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const { accessToken, id, addLabels = [], removeLabels = [] } = args;\n    \n    // Call the Gmail API to modify the email's labels\n    const modifyUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${id}/modify`;\n    const response = Http.request({\n      url: modifyUrl,\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        addLabelIds: addLabels,\n        removeLabelIds: removeLabels\n      })\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to modify email: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    Host.outputString(JSON.stringify({ message: \"Email modified successfully\", id: data.id }));\n    return 0;\n  }\n  ", "/**\n * Main implementation for the Gmail Extism Plugin.\n * This file contains the core implementation that processes the requests from the host.\n */\nimport {\n  CallToolRequest,\n  CallToolResult,\n  ListToolsResult,\n  Tool\n} from \"./pdk\";\n\nimport {\n  handleListEmails,\n  handleSearchEmails,\n  handleSendEmail,\n  handleModifyEmail\n} from \"./handlers/email\";\n\n/**\n * Implementation of the call function that routes requests to the appropriate handler.\n * @param request The request to process\n * @returns The result of processing the request\n */\nexport function callImpl(request: CallToolRequest): CallToolResult {\n  try {\n    // Route the request to the appropriate handler based on the toolId\n    switch (request.toolId) {\n      case \"list_emails\":\n        Host.inputString = () => JSON.stringify(request.arguments);\n        const listResult = handleListEmails();\n        if (listResult === 0) {\n          return new CallToolResult(\"success\", JSON.parse(Host.outputString()), undefined);\n        } else {\n          return new CallToolResult(\"error\", null, \"Failed to list emails\");\n        }\n        \n      case \"search_emails\":\n        Host.inputString = () => JSON.stringify(request.arguments);\n        const searchResult = handleSearchEmails();\n        if (searchResult === 0) {\n          return new CallToolResult(\"success\", JSON.parse(Host.outputString()), undefined);\n        } else {\n          return new CallToolResult(\"error\", null, \"Failed to search emails\");\n        }\n        \n      case \"send_email\":\n        Host.inputString = () => JSON.stringify(request.arguments);\n        const sendResult = handleSendEmail();\n        if (sendResult === 0) {\n          return new CallToolResult(\"success\", JSON.parse(Host.outputString()), undefined);\n        } else {\n          return new CallToolResult(\"error\", null, \"Failed to send email\");\n        }\n        \n      case \"modify_email\":\n        Host.inputString = () => JSON.stringify(request.arguments);\n        const modifyResult = handleModifyEmail();\n        if (modifyResult === 0) {\n          return new CallToolResult(\"success\", JSON.parse(Host.outputString()), undefined);\n        } else {\n          return new CallToolResult(\"error\", null, \"Failed to modify email\");\n        }\n        \n      default:\n        return new CallToolResult(\"error\", null, `Unknown tool: ${request.toolId}`);\n    }\n  } catch (err) {\n    return new CallToolResult(\"error\", null, `Error: ${err instanceof Error ? err.message : String(err)}`);\n  }\n}\n\n/**\n * Implementation of the describe function that returns the list of available tools.\n * @returns A list of available tools\n */\nexport function describeImpl(): ListToolsResult {\n  const tools: Tool[] = [\n    new Tool(\n      \"list_emails\",\n      \"List Emails\",\n      \"Lists emails from the user's Gmail account\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        maxResults: { type: \"number\", description: \"Maximum number of emails to return\", optional: true },\n        query: { type: \"string\", description: \"Query to filter emails\", optional: true }\n      }\n    ),\n    new Tool(\n      \"search_emails\",\n      \"Search Emails\",\n      \"Searches emails in the user's Gmail account based on a query\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        maxResults: { type: \"number\", description: \"Maximum number of emails to return\", optional: true },\n        query: { type: \"string\", description: \"Query to filter emails\" }\n      }\n    ),\n    new Tool(\n      \"send_email\",\n      \"Send Email\",\n      \"Sends an email from the user's Gmail account\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        to: { type: \"string\", description: \"Email recipient\" },\n        subject: { type: \"string\", description: \"Email subject\" },\n        body: { type: \"string\", description: \"Email body (HTML)\" },\n        cc: { type: \"string\", description: \"Carbon copy recipients\", optional: true },\n        bcc: { type: \"string\", description: \"Blind carbon copy recipients\", optional: true }\n      }\n    ),\n    new Tool(\n      \"modify_email\",\n      \"Modify Email\",\n      \"Modifies an email by adding or removing labels\",\n      {\n        accessToken: { type: \"string\", description: \"OAuth2 access token\" },\n        id: { type: \"string\", description: \"Email ID\" },\n        addLabels: { type: \"array\", description: \"Labels to add\", optional: true },\n        removeLabels: { type: \"array\", description: \"Labels to remove\", optional: true }\n      }\n    )\n  ];\n  \n  return new ListToolsResult(tools);\n} "],
  "mappings": "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",
  "names": []
}
