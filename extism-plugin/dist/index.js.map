{
  "version": 3,
  "sources": ["../src/index.ts", "../src/handlers/email.ts"],
  "sourcesContent": ["import {\n  handleListEmails,\n  handleSearchEmails,\n  handleSendEmail,\n  handleModifyEmail,\n} from \"./handlers/email\";\n\n// Each exported function returns an I32 (a number) indicating success (0) or error (non-zero).\nexport function list_emails(): number {\n  return handleListEmails();\n}\n\nexport function search_emails(): number {\n  return handleSearchEmails();\n}\n\nexport function send_email(): number {\n  return handleSendEmail();\n}\n\nexport function modify_email(): number {\n  return handleModifyEmail();\n}\n", "// Do NOT import Host or Http at the top level\u2014assume they are injected as globals.\n\nfunction getArgs(): any | null {\n    const input = Host.inputString();\n    try {\n      return JSON.parse(input);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid JSON input\" }));\n      return null;\n    }\n  }\n  \n  export function handleListEmails(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const accessToken: string = args.accessToken;\n    const maxResults: number = args.maxResults || 10;\n    const query: string = args.query || \"\";\n  \n    const listUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n    const response = Http.request({\n      url: listUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to fetch emails: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    const messages = data.messages || [];\n    const emailDetails: any[] = [];\n  \n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n      const detailResponse = Http.request({\n        url: detailUrl,\n        method: \"GET\",\n        headers: { \"Authorization\": `Bearer ${accessToken}` }\n      });\n      if (detailResponse.status !== 200) {\n        Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n        return 1;\n      }\n      let detail;\n      try {\n        detail = JSON.parse(detailResponse.body);\n      } catch (err) {\n        continue;\n      }\n      const headers = detail.payload?.headers;\n      let subject = \"\";\n      let from = \"\";\n      let date = \"\";\n      if (headers && Array.isArray(headers)) {\n        for (let j = 0; j < headers.length; j++) {\n          const header = headers[j];\n          if (header.name === \"Subject\") subject = header.value;\n          if (header.name === \"From\") from = header.value;\n          if (header.name === \"Date\") date = header.value;\n        }\n      }\n      emailDetails.push({ id: msg.id, subject, from, date });\n    }\n  \n    Host.outputString(JSON.stringify(emailDetails, null, 2));\n    return 0;\n  }\n  \n  export function handleSearchEmails(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const accessToken: string = args.accessToken;\n    const maxResults: number = args.maxResults || 10;\n    const query: string = args.query;\n    if (!query) {\n      Host.outputString(JSON.stringify({ error: \"query parameter is required\" }));\n      return 1;\n    }\n  \n    const searchUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages?maxResults=${maxResults}&q=${encodeURIComponent(query)}`;\n    const response = Http.request({\n      url: searchUrl,\n      method: \"GET\",\n      headers: { \"Authorization\": `Bearer ${accessToken}` }\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to search emails: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    const messages = data.messages || [];\n    const emailDetails: any[] = [];\n  \n    for (let i = 0; i < messages.length; i++) {\n      const msg = messages[i];\n      const detailUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${msg.id}`;\n      const detailResponse = Http.request({\n        url: detailUrl,\n        method: \"GET\",\n        headers: { \"Authorization\": `Bearer ${accessToken}` }\n      });\n      if (detailResponse.status !== 200) {\n        Host.outputString(JSON.stringify({ error: `Failed to fetch email details: ${detailResponse.body}` }));\n        return 1;\n      }\n      let detail;\n      try {\n        detail = JSON.parse(detailResponse.body);\n      } catch (err) {\n        continue;\n      }\n      const headers = detail.payload?.headers;\n      let subject = \"\";\n      let from = \"\";\n      let date = \"\";\n      if (headers && Array.isArray(headers)) {\n        for (let j = 0; j < headers.length; j++) {\n          const header = headers[j];\n          if (header.name === \"Subject\") subject = header.value;\n          if (header.name === \"From\") from = header.value;\n          if (header.name === \"Date\") date = header.value;\n        }\n      }\n      emailDetails.push({ id: msg.id, subject, from, date });\n    }\n  \n    Host.outputString(JSON.stringify(emailDetails, null, 2));\n    return 0;\n  }\n  \n  export function handleSendEmail(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const { accessToken, to, subject, body, cc, bcc } = args;\n    const messageParts = [\n      \"Content-Type: text/html; charset=utf-8\",\n      \"MIME-Version: 1.0\",\n      `To: ${to}`,\n      cc ? `Cc: ${cc}` : \"\",\n      bcc ? `Bcc: ${bcc}` : \"\",\n      `Subject: ${subject}`,\n      \"\",\n      body\n    ].filter(Boolean);\n    const message = messageParts.join(\"\\r\\n\");\n  \n    let encodedMessage = Buffer.from(message).toString(\"base64\");\n    encodedMessage = encodedMessage.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n  \n    const sendUrl = \"https://gmail.googleapis.com/gmail/v1/users/me/messages/send\";\n    const response = Http.request({\n      url: sendUrl,\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ raw: encodedMessage })\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to send email: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    Host.outputString(JSON.stringify({ message: \"Email sent successfully\", id: data.id }));\n    return 0;\n  }\n  \n  export function handleModifyEmail(): number {\n    const args = getArgs();\n    if (!args) return 1;\n  \n    const { accessToken, id, addLabels = [], removeLabels = [] } = args;\n    const modifyUrl = `https://gmail.googleapis.com/gmail/v1/users/me/messages/${id}/modify`;\n    const response = Http.request({\n      url: modifyUrl,\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        addLabelIds: addLabels,\n        removeLabelIds: removeLabels\n      })\n    });\n  \n    if (response.status !== 200) {\n      Host.outputString(JSON.stringify({ error: `Failed to modify email: ${response.body}` }));\n      return 1;\n    }\n  \n    let data;\n    try {\n      data = JSON.parse(response.body);\n    } catch (err) {\n      Host.outputString(JSON.stringify({ error: \"Invalid response from Gmail\" }));\n      return 1;\n    }\n  \n    Host.outputString(JSON.stringify({ message: \"Email modified successfully\", id: data.id }));\n    return 0;\n  }\n  "],
  "mappings": "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",
  "names": []
}
